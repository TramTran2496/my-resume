{"version":3,"sources":["Header/Header.js","BasicInfo/BasicInfo.js","App.js","serviceWorker.js","index.js","Header/img/avatar.jpg","BasicInfo/data/CV20190205.pdf"],"names":["Header","_ref","data","name","career","react_default","a","createElement","className","avatar","size","src","shape","last","first","BasicInfo","social","contact","information","objective","language","map","item","index","href","link","key","target","rel","icon","type","theme","cv","download","BasicInfo_WhiteSection","title","WhiteSection","_ref2","divider","Array","isArray","list","dataSource","renderItem","Item","value","App","Fragment","src_Header_Header","src_BasicInfo_BasicInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d5ffa2b5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Header.scss'\nimport {Avatar} from 'antd'\nimport avatar from './img/avatar.jpg'\n\nconst Header = ({data}) => {\n  const {name, career} = data\n\n  return (\n    <div className='header'>\n      <div className='cover'>\n        <div className='cover-overlay'/>\n        <Avatar className='avatar' size={200} src={avatar} shape='square'/>\n        <div className='name'><b>{name.last}</b> {name.first}</div>\n        <div className='career'>{career}</div>\n      </div>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default Header\n","import React from 'react'\nimport './BasicInfo.scss'\nimport {Icon, Divider, List} from 'antd'\nimport PropTypes from 'prop-types'\nimport cv from './data/CV20190205.pdf'\n\nconst BasicInfo = ({data}) => {\n  const {social, contact, information, objective, language} = data\n\n  return (\n    <div className='basic-info'>\n      <div className='media-social'>\n        {social.map((item, index) => <a href={item.link}\n                                        key={index}\n                                        target='_blank'\n                                        rel='noopener noreferrer'>\n          <Icon type={item.name} theme='filled'/>\n        </a>)}\n      </div>\n      <div className='contact'>\n        {contact.map((item, index) =>\n          <div key={index}><Icon type={item.name}/>{item.contact}</div>)}\n        <a href={cv} download><Icon type='file-pdf'/>Get my resume</a>\n      </div>\n      <WhiteSection title='BASIC INFORMATION' data={information}/>\n      <WhiteSection title='OBJECTIVE' data={objective}/>\n      <WhiteSection title='LANGUAGE' data={language}/>\n    </div>\n  )\n}\n\nBasicInfo.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default BasicInfo\n\nconst WhiteSection = ({title, data}) => (\n  <div className='info'>\n    <Divider>{title}</Divider>\n    {!Array.isArray(data) ? <div className='info-text'>{data}</div>\n      : <List dataSource={data}\n              renderItem={(item, index) => (\n                <List.Item key={index}\n                           className='info-item'>{item.title}\n                  <div className='info-italic'>{item.value}</div>\n                </List.Item>)}/>}\n  </div>\n)","import React from 'react'\nimport Header from './Header/Header'\nimport BasicInfo from './BasicInfo/BasicInfo'\n\nconst App = () => {\n  const headerData = {\n    name: {first: 'Thi Ngoc Tram', last: 'Tran'},\n    career: 'Software Engineer'\n  }\n  const basicData = {\n    social: [{name: 'github', link: 'https://github.com/TramTran2496'},\n      {name: 'linkedin', link: 'https://www.linkedin.com/in/tr%C3%A2m-tr%E1%BA%A7n-27a521112/'},\n      {name: 'facebook', link: 'https://www.facebook.com/TramTran2496'},\n      {name: 'instagram', link: 'https://www.instagram.com/hilary.eve'}],\n    contact: [{name: 'mail', contact: 'ttntram2496@gmail.com'},\n      {name: 'phone', contact: '+84704113755'}],\n    information: [{title: 'Birthday', value: '02 Apr 1996'},\n      {title: 'Gender', value: 'female'},\n      {title: 'Experiences', value: '2 years'}],\n    objective: 'Lorem ipsum dolor sit amet, morbi augue amet, gravida tellus neque non viverra, amet massa cras elit, faucibus et vitae voluptate, in enim nullam magna elit ut.',\n    language: [{title: 'Vietnamese', value: 'native'},\n      {title: 'English', value: 'advance'}]\n  }\n\n  return (\n    <>\n      <Header data={headerData}/>\n      <BasicInfo data={basicData}/>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.7594b778.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CV20190205.e121fad2.pdf\";"],"sourceRoot":""}