{"version":3,"sources":["Header/Header.js","BasicInfo/BasicInfo.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","data","name","career","react_default","a","createElement","className","last","first","BasicInfo","social","contact","information","objective","interests","map","item","index","href","link","key","target","icon","type","theme","divider","list","dataSource","renderItem","Item","title","value","BasicInfo_WhiteSection","text","WhiteSection","_ref2","App","Fragment","src_Header_Header","src_BasicInfo_BasicInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd1ce223.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Header.scss'\n\nconst Header = ({data}) => {\n  const {name, career} = data\n\n  return (\n    <div className='header'>\n      <div className='cover'>\n        <div className='cover-overlay'/>\n        <div className='avatar'/>\n        <div className='name'><b>{name.last}</b> {name.first}</div>\n        <div className='career'>{career}</div>\n      </div>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default Header\n","import React from 'react'\nimport './BasicInfo.scss'\nimport {Icon, Divider, List} from 'antd'\nimport PropTypes from 'prop-types'\n\nconst BasicInfo = ({data}) => {\n  const {social, contact, information, objective, interests} = data\n\n  return (\n    <div className='basic-info'>\n      <div className='media-social'>\n        {social.map((item, index) => <a href={item.link}\n                                        key={index}\n                                        target='_blank'>\n          <Icon type={item.name} theme='filled'/>\n        </a>)}\n      </div>\n      <div className='contact'>\n        {contact.map((item, index) =>\n          <div key={index}><Icon type={item.name}/>{item.contact}</div>)}\n      </div>\n      <div className='info'>\n        <Divider>BASIC INFORMATION</Divider>\n        <List dataSource={information}\n              renderItem={(item, index) => (\n                <List.Item key={index}\n                           className='info-item'>{item.title}: {item.value}</List.Item>)}/>\n      </div>\n      <WhiteSection title='OBJECTTIVE' text={objective}/>\n      <WhiteSection title='INTERESTS' text={interests}/>\n    </div>\n  )\n}\n\nBasicInfo.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default BasicInfo\n\nconst WhiteSection = ({title, text}) => (\n  <div className='info'>\n    <Divider>{title}</Divider>\n    <div className='info-text'>{text}</div>\n  </div>\n)","import React from 'react'\nimport Header from './Header/Header'\nimport BasicInfo from './BasicInfo/BasicInfo'\n\nconst App = () => {\n  const headerData = {\n    name: {first: 'Thi Ngoc Tram', last: 'Tran'},\n    career: 'Software Engineer'\n  }\n  const basicData = {\n    social: [{name: 'github', link: 'https://github.com/TramTran2496'},\n      {name: 'linkedin', link: 'https://www.linkedin.com/in/tr%C3%A2m-tr%E1%BA%A7n-27a521112/'},\n      {name: 'facebook', link: 'https://www.facebook.com/TramTran2496'},\n      {name: 'instagram', link: 'https://www.instagram.com/hilary.eve'}],\n    contact: [{name: 'mail', contact: 'ttntram2496@gmail.com'},\n      {name: 'phone', contact: '+84704113755'}],\n    information: [{title: 'Birthday', value: '02/04/1996'},\n      {title: 'Gender', value: 'female'},\n      {title: 'Experiences', value: '2 years'}],\n    objective: 'Lorem ipsum dolor sit amet, morbi augue amet, gravida tellus neque non viverra, amet massa cras elit, faucibus et vitae voluptate, in enim nullam magna elit ut.',\n    interests: 'Lorem ipsum dolor sit amet, morbi augue amet, gravida tellus neque non viverra.'\n  }\n\n  return (\n    <>\n      <Header data={headerData}/>\n      <BasicInfo data={basicData}/>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}